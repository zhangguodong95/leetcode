## [98. 验证二叉搜索树](https://leetcode-cn.com/problems/validate-binary-search-tree/)

给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
**示例 1:**

```
输入:
    2
   / \
  1   3
输出: true
```

**示例 2:**

```
输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
```

**解释**: 输入为: [5,1,4,null,null,3,6]。根节点的值为 5 ，但是其右子节点值为 4 。

### 思路解析

利用二叉搜索树中序遍历是从小到大的顺序。

利用递归

1.首先判断左子树是否是二叉树搜索树

2.如果是，那么比较跟节点和前一个节点的值

3.判断右子树是否二叉搜索树

### 代码实现

```java
Long prev = Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        //判断左子树是否是搜索二叉树
        if (!isValidBST(root.left)) {
            return false;
        }
        //左子树是二叉搜索树 判断当前节点的值
        if (prev >= root.val) {
            return false;
        }
        prev = (long)root.val;

        return isValidBST(root.right);

    }
```

